; Add the includes

(include "variables.yuck")
(include "controls.yuck")
(include "listeners.yuck")
(include "metrics.yuck")
(include "pollers.yuck")
(include "revealer.yuck")

(defvar eww "$HOME/.local/bin/eww -c $HOME/.config/eww/bar")

(defwidget bottombar []
  (centerbox :orientation "h"
    (box :orientation "h" :space-evenly false (clock))
    (box :orientation "h" :space-evenly false (workspaces_dynamic))
    (rightside)
  )
)

(defwidget icon-module [icon ?class ?visible]
  (box :class "${class} icon-module" :orientation "h" :halign "start" :space-evenly false :visible {visible ?: true}
    (label :class "icon-module__icon" :text "${icon}")
    (children)
  )
)

;; Left Side ;;

(defwidget workspaces_dynamic []
	(box :class "workspaces" :orientation "h" :space-evenly false
	  (literal :content workspaces_dyn {workspace})
	)
)

;; Center ;;

(defwidget clock []
  (box :class "clock" :orientation "h" :space-evenly false (label :text "${time}"))
)

(defwidget weather []
  (icon-module :icon "${weather.icon}"
    (label :text "${weather.description}")
  )
)

(defwidget music []
  (box :class "music"
    :orientation "h"
    :space-evenly "false"
    :halign "center"
    {music != "" ? "${music}" : "N/A"}
  )
)

;; Right Menus ;;

(defwidget rightside []
  (box :class "rightside" :orientation "h" :space-evenly false :halign "end"
    (box :orientation "h" :space-evenly false :halign "end"
      (usages)
      (music)
      (volume)
      (brightness)
      (powermenu)
    )
  )
)

(defwidget usages []
  (box :orientation "h" :halign "end" :space-evenly "true" :class "usage"
      (metric :value {EWW_CPU.avg})
      (metric :value {EWW_RAM.used_mem_perc})
      (metric :value "${round(EWW_DISK["/"].used_perc, 0)}")
    )
)

(defwidget volume [?class]
  (box :space-evenly false
    :class "hover-module parent-volume"
    (revealer-on-hover :class "hl-on-hover" :var revealVolume :varname "revealVolume" :transition "slideleft" :class "volume"
      (hovered-sign :var revealVolume
        (label :text "")
        (label :text "")
      )
      (metrich :icon "" :class "volume" :value volume :onchange "amixer -D pulse sset Master {}%")""
    )
  )
)

(defwidget brightness [?class]
  (box :space-evenly false
    :class "hover-module parent-brightness"
    (revealer-on-hover :class "hl-on-hover" :var revealBrightness :varname "revealBrightness" :transition "slideleft" :class "brightness"
      (hovered-sign :var revealBrightness
        (label :text "")
        (label :text "")
      )
      (metrich :icon "" :class "brightness" :value currbrightness :onchange "brightnessctl s {}%")""
    )
  )
)

(defwidget notifications [?class]
  (box :space-evenly false
    :class "hover-module parent-notifications"
    (revealer-on-hover :class "hl-on-hover" :var revealNotify :varname "revealNotify" :transition "slideleft" :class "notifications"
      (hovered-sign :var revealNotify
        (label :class "notifications" :text "")
        (label :class "notifications" :text "")
      )
      (label :class "notifications" :text " ${notifications} ")""
    )
  )
)
  
(defwidget network []
	(box :orientation "h" :space-evenly false (label :text "${interfaceId}: ${round(EWW_NET[interfaceId].NET_UP / 1000000, 2)}")
		(label :class {round(EWW_NET[interfaceId].NET_UP / 1000000, 2) > 0.1 ? round(EWW_NET[interfaceId].NET_UP / 1000000, 2) > 5 ? "veryuplink" : "uplink" : "noactive"} :text "  "
		)
		(label :text "${round(EWW_NET[interfaceId].NET_DOWN / 1000000, 2)}")
		(label :class {round(EWW_NET[interfaceId].NET_DOWN / 1000000, 2) > 0.1 ? round(EWW_NET[interfaceId].NET_DOWN / 1000000, 2) > 10 ? "verydownlink" : "downlink" : "noactive"} :text "  "
		)
	)
)

(defwidget powermenu [?class]
  (box :space-evenly false
    :class "hover-module powermenu"
    (revealer-on-hover :class "hl-on-hover"
      :var revealPower
      :varname "revealPower"
      :transition "slideleft"
      :class "power"
      
      (hovered-sign :var revealPower
        (label :text "")
        (label :text "")
      )
      (box :orientation "h" :space-evenly "false"
        (button :class "restart-btn" :onclick "i3 restart" "" )
        (button :class "btn" :onclick "tryreboot" "")
        (button :class "btn" :onclick "systemctl -i suspend" "")
        (button :class "btn" :onclick "systemctl -i suspend" "")
        (button :class "btn" :onclick "xfce4-session-logout --logout" "")
        (button :class "btn" :onclick "light-locker-command -l" "")
      )
      (button :class "power" :onclick "trypoweroff" "")
    )
  )
)
  
(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%" :y "0%" :width "90%" :height "10px" :anchor "top center")
  :reserve (struts :side "top" :distance "4%")
  (bar)
)

(defwindow bottombar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%" :y "0%" :width "90%" :height "5px" :anchor "bottom center")
  :reserve (struts :side "bottom" :distance "0%")
  (bottombar)
)

(defvar workspaces_dyn "")
